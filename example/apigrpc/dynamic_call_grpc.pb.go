// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: dynamic_call.proto

package apigrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_SayHello_FullMethodName = "/apigrpc.Greeter/SayHello"
	Greeter_SayGirl_FullMethodName  = "/apigrpc.Greeter/SayGirl"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SayGirl(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayGirl(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayGirl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SayGirl(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) SayGirl(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayGirl not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayGirl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayGirl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayGirl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayGirl(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigrpc.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "SayGirl",
			Handler:    _Greeter_SayGirl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic_call.proto",
}

const (
	Notify_SayWorld_FullMethodName = "/apigrpc.Notify/SayWorld"
	Notify_SayHaha_FullMethodName  = "/apigrpc.Notify/SayHaha"
	Notify_SayHi_FullMethodName    = "/apigrpc.Notify/SayHi"
)

// NotifyClient is the client API for Notify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyClient interface {
	// Sends notify
	SayWorld(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyReply, error)
	SayHaha(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyReply, error)
	SayHi(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyReply, error)
}

type notifyClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyClient(cc grpc.ClientConnInterface) NotifyClient {
	return &notifyClient{cc}
}

func (c *notifyClient) SayWorld(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyReply, error) {
	out := new(NotifyReply)
	err := c.cc.Invoke(ctx, Notify_SayWorld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) SayHaha(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyReply, error) {
	out := new(NotifyReply)
	err := c.cc.Invoke(ctx, Notify_SayHaha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyClient) SayHi(ctx context.Context, in *NotifyReq, opts ...grpc.CallOption) (*NotifyReply, error) {
	out := new(NotifyReply)
	err := c.cc.Invoke(ctx, Notify_SayHi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyServer is the server API for Notify service.
// All implementations must embed UnimplementedNotifyServer
// for forward compatibility
type NotifyServer interface {
	// Sends notify
	SayWorld(context.Context, *NotifyReq) (*NotifyReply, error)
	SayHaha(context.Context, *NotifyReq) (*NotifyReply, error)
	SayHi(context.Context, *NotifyReq) (*NotifyReply, error)
	mustEmbedUnimplementedNotifyServer()
}

// UnimplementedNotifyServer must be embedded to have forward compatible implementations.
type UnimplementedNotifyServer struct {
}

func (UnimplementedNotifyServer) SayWorld(context.Context, *NotifyReq) (*NotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayWorld not implemented")
}
func (UnimplementedNotifyServer) SayHaha(context.Context, *NotifyReq) (*NotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHaha not implemented")
}
func (UnimplementedNotifyServer) SayHi(context.Context, *NotifyReq) (*NotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedNotifyServer) mustEmbedUnimplementedNotifyServer() {}

// UnsafeNotifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyServer will
// result in compilation errors.
type UnsafeNotifyServer interface {
	mustEmbedUnimplementedNotifyServer()
}

func RegisterNotifyServer(s grpc.ServiceRegistrar, srv NotifyServer) {
	s.RegisterService(&Notify_ServiceDesc, srv)
}

func _Notify_SayWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).SayWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_SayWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).SayWorld(ctx, req.(*NotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_SayHaha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).SayHaha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_SayHaha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).SayHaha(ctx, req.(*NotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notify_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notify_SayHi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyServer).SayHi(ctx, req.(*NotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Notify_ServiceDesc is the grpc.ServiceDesc for Notify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigrpc.Notify",
	HandlerType: (*NotifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayWorld",
			Handler:    _Notify_SayWorld_Handler,
		},
		{
			MethodName: "SayHaha",
			Handler:    _Notify_SayHaha_Handler,
		},
		{
			MethodName: "SayHi",
			Handler:    _Notify_SayHi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic_call.proto",
}

const (
	BidiStreamService_BidiRPC_FullMethodName = "/apigrpc.BidiStreamService/BidiRPC"
)

// BidiStreamServiceClient is the client API for BidiStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidiStreamServiceClient interface {
	BidiRPC(ctx context.Context, opts ...grpc.CallOption) (BidiStreamService_BidiRPCClient, error)
}

type bidiStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBidiStreamServiceClient(cc grpc.ClientConnInterface) BidiStreamServiceClient {
	return &bidiStreamServiceClient{cc}
}

func (c *bidiStreamServiceClient) BidiRPC(ctx context.Context, opts ...grpc.CallOption) (BidiStreamService_BidiRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &BidiStreamService_ServiceDesc.Streams[0], BidiStreamService_BidiRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bidiStreamServiceBidiRPCClient{stream}
	return x, nil
}

type BidiStreamService_BidiRPCClient interface {
	Send(*SimpleData) error
	Recv() (*SimpleData, error)
	grpc.ClientStream
}

type bidiStreamServiceBidiRPCClient struct {
	grpc.ClientStream
}

func (x *bidiStreamServiceBidiRPCClient) Send(m *SimpleData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidiStreamServiceBidiRPCClient) Recv() (*SimpleData, error) {
	m := new(SimpleData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidiStreamServiceServer is the server API for BidiStreamService service.
// All implementations must embed UnimplementedBidiStreamServiceServer
// for forward compatibility
type BidiStreamServiceServer interface {
	BidiRPC(BidiStreamService_BidiRPCServer) error
	mustEmbedUnimplementedBidiStreamServiceServer()
}

// UnimplementedBidiStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBidiStreamServiceServer struct {
}

func (UnimplementedBidiStreamServiceServer) BidiRPC(BidiStreamService_BidiRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiRPC not implemented")
}
func (UnimplementedBidiStreamServiceServer) mustEmbedUnimplementedBidiStreamServiceServer() {}

// UnsafeBidiStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidiStreamServiceServer will
// result in compilation errors.
type UnsafeBidiStreamServiceServer interface {
	mustEmbedUnimplementedBidiStreamServiceServer()
}

func RegisterBidiStreamServiceServer(s grpc.ServiceRegistrar, srv BidiStreamServiceServer) {
	s.RegisterService(&BidiStreamService_ServiceDesc, srv)
}

func _BidiStreamService_BidiRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidiStreamServiceServer).BidiRPC(&bidiStreamServiceBidiRPCServer{stream})
}

type BidiStreamService_BidiRPCServer interface {
	Send(*SimpleData) error
	Recv() (*SimpleData, error)
	grpc.ServerStream
}

type bidiStreamServiceBidiRPCServer struct {
	grpc.ServerStream
}

func (x *bidiStreamServiceBidiRPCServer) Send(m *SimpleData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidiStreamServiceBidiRPCServer) Recv() (*SimpleData, error) {
	m := new(SimpleData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidiStreamService_ServiceDesc is the grpc.ServiceDesc for BidiStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidiStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigrpc.BidiStreamService",
	HandlerType: (*BidiStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidiRPC",
			Handler:       _BidiStreamService_BidiRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dynamic_call.proto",
}

const (
	ServerStreamService_StreamRpc_FullMethodName = "/apigrpc.ServerStreamService/StreamRpc"
)

// ServerStreamServiceClient is the client API for ServerStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerStreamServiceClient interface {
	StreamRpc(ctx context.Context, in *ServerStreamData, opts ...grpc.CallOption) (ServerStreamService_StreamRpcClient, error)
}

type serverStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerStreamServiceClient(cc grpc.ClientConnInterface) ServerStreamServiceClient {
	return &serverStreamServiceClient{cc}
}

func (c *serverStreamServiceClient) StreamRpc(ctx context.Context, in *ServerStreamData, opts ...grpc.CallOption) (ServerStreamService_StreamRpcClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerStreamService_ServiceDesc.Streams[0], ServerStreamService_StreamRpc_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serverStreamServiceStreamRpcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServerStreamService_StreamRpcClient interface {
	Recv() (*ServerStreamData, error)
	grpc.ClientStream
}

type serverStreamServiceStreamRpcClient struct {
	grpc.ClientStream
}

func (x *serverStreamServiceStreamRpcClient) Recv() (*ServerStreamData, error) {
	m := new(ServerStreamData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerStreamServiceServer is the server API for ServerStreamService service.
// All implementations must embed UnimplementedServerStreamServiceServer
// for forward compatibility
type ServerStreamServiceServer interface {
	StreamRpc(*ServerStreamData, ServerStreamService_StreamRpcServer) error
	mustEmbedUnimplementedServerStreamServiceServer()
}

// UnimplementedServerStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerStreamServiceServer struct {
}

func (UnimplementedServerStreamServiceServer) StreamRpc(*ServerStreamData, ServerStreamService_StreamRpcServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRpc not implemented")
}
func (UnimplementedServerStreamServiceServer) mustEmbedUnimplementedServerStreamServiceServer() {}

// UnsafeServerStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerStreamServiceServer will
// result in compilation errors.
type UnsafeServerStreamServiceServer interface {
	mustEmbedUnimplementedServerStreamServiceServer()
}

func RegisterServerStreamServiceServer(s grpc.ServiceRegistrar, srv ServerStreamServiceServer) {
	s.RegisterService(&ServerStreamService_ServiceDesc, srv)
}

func _ServerStreamService_StreamRpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerStreamServiceServer).StreamRpc(m, &serverStreamServiceStreamRpcServer{stream})
}

type ServerStreamService_StreamRpcServer interface {
	Send(*ServerStreamData) error
	grpc.ServerStream
}

type serverStreamServiceStreamRpcServer struct {
	grpc.ServerStream
}

func (x *serverStreamServiceStreamRpcServer) Send(m *ServerStreamData) error {
	return x.ServerStream.SendMsg(m)
}

// ServerStreamService_ServiceDesc is the grpc.ServiceDesc for ServerStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigrpc.ServerStreamService",
	HandlerType: (*ServerStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRpc",
			Handler:       _ServerStreamService_StreamRpc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dynamic_call.proto",
}
